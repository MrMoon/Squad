/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.squad.friend.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FriendEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5357686113274794364L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FriendEvent\",\"namespace\":\"com.squad.friend.model\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"FriendConnection\",\"type\":{\"type\":\"record\",\"name\":\"Friend\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"friendId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"friendEventType\",\"type\":{\"type\":\"enum\",\"name\":\"FriendEventType\",\"symbols\":[\"FRIEND_ADDED\",\"FRIEND_REMOVE\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FriendEvent> ENCODER =
      new BinaryMessageEncoder<FriendEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FriendEvent> DECODER =
      new BinaryMessageDecoder<FriendEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FriendEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FriendEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FriendEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FriendEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FriendEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FriendEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FriendEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FriendEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String eventId;
  @Deprecated public com.squad.friend.model.Friend FriendConnection;
  @Deprecated public com.squad.friend.model.FriendEventType friendEventType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FriendEvent() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param FriendConnection The new value for FriendConnection
   * @param friendEventType The new value for friendEventType
   */
  public FriendEvent(java.lang.String eventId, com.squad.friend.model.Friend FriendConnection, com.squad.friend.model.FriendEventType friendEventType) {
    this.eventId = eventId;
    this.FriendConnection = FriendConnection;
    this.friendEventType = friendEventType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return FriendConnection;
    case 2: return friendEventType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.lang.String)value$; break;
    case 1: FriendConnection = (com.squad.friend.model.Friend)value$; break;
    case 2: friendEventType = (com.squad.friend.model.FriendEventType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'FriendConnection' field.
   * @return The value of the 'FriendConnection' field.
   */
  public com.squad.friend.model.Friend getFriendConnection() {
    return FriendConnection;
  }


  /**
   * Sets the value of the 'FriendConnection' field.
   * @param value the value to set.
   */
  public void setFriendConnection(com.squad.friend.model.Friend value) {
    this.FriendConnection = value;
  }

  /**
   * Gets the value of the 'friendEventType' field.
   * @return The value of the 'friendEventType' field.
   */
  public com.squad.friend.model.FriendEventType getFriendEventType() {
    return friendEventType;
  }


  /**
   * Sets the value of the 'friendEventType' field.
   * @param value the value to set.
   */
  public void setFriendEventType(com.squad.friend.model.FriendEventType value) {
    this.friendEventType = value;
  }

  /**
   * Creates a new FriendEvent RecordBuilder.
   * @return A new FriendEvent RecordBuilder
   */
  public static com.squad.friend.model.FriendEvent.Builder newBuilder() {
    return new com.squad.friend.model.FriendEvent.Builder();
  }

  /**
   * Creates a new FriendEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FriendEvent RecordBuilder
   */
  public static com.squad.friend.model.FriendEvent.Builder newBuilder(com.squad.friend.model.FriendEvent.Builder other) {
    if (other == null) {
      return new com.squad.friend.model.FriendEvent.Builder();
    } else {
      return new com.squad.friend.model.FriendEvent.Builder(other);
    }
  }

  /**
   * Creates a new FriendEvent RecordBuilder by copying an existing FriendEvent instance.
   * @param other The existing instance to copy.
   * @return A new FriendEvent RecordBuilder
   */
  public static com.squad.friend.model.FriendEvent.Builder newBuilder(com.squad.friend.model.FriendEvent other) {
    if (other == null) {
      return new com.squad.friend.model.FriendEvent.Builder();
    } else {
      return new com.squad.friend.model.FriendEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for FriendEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FriendEvent>
    implements org.apache.avro.data.RecordBuilder<FriendEvent> {

    private java.lang.String eventId;
    private com.squad.friend.model.Friend FriendConnection;
    private com.squad.friend.model.Friend.Builder FriendConnectionBuilder;
    private com.squad.friend.model.FriendEventType friendEventType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.squad.friend.model.FriendEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.FriendConnection)) {
        this.FriendConnection = data().deepCopy(fields()[1].schema(), other.FriendConnection);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasFriendConnectionBuilder()) {
        this.FriendConnectionBuilder = com.squad.friend.model.Friend.newBuilder(other.getFriendConnectionBuilder());
      }
      if (isValidValue(fields()[2], other.friendEventType)) {
        this.friendEventType = data().deepCopy(fields()[2].schema(), other.friendEventType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing FriendEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.squad.friend.model.FriendEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.FriendConnection)) {
        this.FriendConnection = data().deepCopy(fields()[1].schema(), other.FriendConnection);
        fieldSetFlags()[1] = true;
      }
      this.FriendConnectionBuilder = null;
      if (isValidValue(fields()[2], other.friendEventType)) {
        this.friendEventType = data().deepCopy(fields()[2].schema(), other.friendEventType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.squad.friend.model.FriendEvent.Builder setEventId(java.lang.String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.squad.friend.model.FriendEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'FriendConnection' field.
      * @return The value.
      */
    public com.squad.friend.model.Friend getFriendConnection() {
      return FriendConnection;
    }


    /**
      * Sets the value of the 'FriendConnection' field.
      * @param value The value of 'FriendConnection'.
      * @return This builder.
      */
    public com.squad.friend.model.FriendEvent.Builder setFriendConnection(com.squad.friend.model.Friend value) {
      validate(fields()[1], value);
      this.FriendConnectionBuilder = null;
      this.FriendConnection = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'FriendConnection' field has been set.
      * @return True if the 'FriendConnection' field has been set, false otherwise.
      */
    public boolean hasFriendConnection() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'FriendConnection' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.squad.friend.model.Friend.Builder getFriendConnectionBuilder() {
      if (FriendConnectionBuilder == null) {
        if (hasFriendConnection()) {
          setFriendConnectionBuilder(com.squad.friend.model.Friend.newBuilder(FriendConnection));
        } else {
          setFriendConnectionBuilder(com.squad.friend.model.Friend.newBuilder());
        }
      }
      return FriendConnectionBuilder;
    }

    /**
     * Sets the Builder instance for the 'FriendConnection' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.squad.friend.model.FriendEvent.Builder setFriendConnectionBuilder(com.squad.friend.model.Friend.Builder value) {
      clearFriendConnection();
      FriendConnectionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'FriendConnection' field has an active Builder instance
     * @return True if the 'FriendConnection' field has an active Builder instance
     */
    public boolean hasFriendConnectionBuilder() {
      return FriendConnectionBuilder != null;
    }

    /**
      * Clears the value of the 'FriendConnection' field.
      * @return This builder.
      */
    public com.squad.friend.model.FriendEvent.Builder clearFriendConnection() {
      FriendConnection = null;
      FriendConnectionBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'friendEventType' field.
      * @return The value.
      */
    public com.squad.friend.model.FriendEventType getFriendEventType() {
      return friendEventType;
    }


    /**
      * Sets the value of the 'friendEventType' field.
      * @param value The value of 'friendEventType'.
      * @return This builder.
      */
    public com.squad.friend.model.FriendEvent.Builder setFriendEventType(com.squad.friend.model.FriendEventType value) {
      validate(fields()[2], value);
      this.friendEventType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'friendEventType' field has been set.
      * @return True if the 'friendEventType' field has been set, false otherwise.
      */
    public boolean hasFriendEventType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'friendEventType' field.
      * @return This builder.
      */
    public com.squad.friend.model.FriendEvent.Builder clearFriendEventType() {
      friendEventType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FriendEvent build() {
      try {
        FriendEvent record = new FriendEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        if (FriendConnectionBuilder != null) {
          try {
            record.FriendConnection = this.FriendConnectionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("FriendConnection"));
            throw e;
          }
        } else {
          record.FriendConnection = fieldSetFlags()[1] ? this.FriendConnection : (com.squad.friend.model.Friend) defaultValue(fields()[1]);
        }
        record.friendEventType = fieldSetFlags()[2] ? this.friendEventType : (com.squad.friend.model.FriendEventType) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FriendEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<FriendEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FriendEvent>
    READER$ = (org.apache.avro.io.DatumReader<FriendEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventId);

    this.FriendConnection.customEncode(out);

    out.writeEnum(this.friendEventType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString();

      if (this.FriendConnection == null) {
        this.FriendConnection = new com.squad.friend.model.Friend();
      }
      this.FriendConnection.customDecode(in);

      this.friendEventType = com.squad.friend.model.FriendEventType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventId = in.readString();
          break;

        case 1:
          if (this.FriendConnection == null) {
            this.FriendConnection = new com.squad.friend.model.Friend();
          }
          this.FriendConnection.customDecode(in);
          break;

        case 2:
          this.friendEventType = com.squad.friend.model.FriendEventType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










