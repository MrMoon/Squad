/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.squad.notebook.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Note extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Note\",\"namespace\":\"com.squad.notebook.model\",\"fields\":[{\"name\":\"noteId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"text\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isPublic\",\"type\":\"boolean\"},{\"name\":\"isNotifiable\",\"type\":\"boolean\"},{\"name\":\"NoteType\",\"type\":{\"type\":\"enum\",\"name\":\"NoteType\",\"symbols\":[\"NOTE\",\"TASK\"]}}]}");
  private static final long serialVersionUID = -5101746433572401696L;
  private static SpecificData MODEL$ = new SpecificData();
  private static final BinaryMessageEncoder<Note> ENCODER =
          new BinaryMessageEncoder<Note>(MODEL$ , SCHEMA$);
  private static final BinaryMessageDecoder<Note> DECODER =
          new BinaryMessageDecoder<Note>(MODEL$ , SCHEMA$);
  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Note>
          WRITER$ = (org.apache.avro.io.DatumWriter<Note>) MODEL$.createDatumWriter(SCHEMA$);
  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Note>
          READER$ = (org.apache.avro.io.DatumReader<Note>) MODEL$.createDatumReader(SCHEMA$);
  @Deprecated
  public java.lang.String noteId;
  @Deprecated
  public java.lang.String userId;
  @Deprecated
  public java.lang.String name;
  @Deprecated
  public java.lang.String groupId;
  @Deprecated
  public java.lang.String text;
  @Deprecated
  public boolean isPublic;
  @Deprecated
  public boolean isNotifiable;
  @Deprecated
  public com.squad.notebook.model.NoteType NoteType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Note() {
  }

  /**
   * All-args constructor.
   * @param noteId The new value for noteId
   * @param userId The new value for userId
   * @param name The new value for name
   * @param groupId The new value for groupId
   * @param text The new value for text
   * @param isPublic The new value for isPublic
   * @param isNotifiable The new value for isNotifiable
   * @param NoteType The new value for NoteType
   */
  public Note(java.lang.String noteId , java.lang.String userId , java.lang.String name , java.lang.String groupId , java.lang.String text , java.lang.Boolean isPublic , java.lang.Boolean isNotifiable , com.squad.notebook.model.NoteType NoteType) {
    this.noteId = noteId;
    this.userId = userId;
    this.name = name;
    this.groupId = groupId;
    this.text = text;
    this.isPublic = isPublic;
    this.isNotifiable = isNotifiable;
    this.NoteType = NoteType;
  }

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Note> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Note> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Note> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Note>(MODEL$ , SCHEMA$ , resolver);
  }

  /**
   * Deserializes a Note from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Note instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Note fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /**
   * Creates a new Note RecordBuilder.
   * @return A new Note RecordBuilder
   */
  public static com.squad.notebook.model.Note.Builder newBuilder() {
    return new com.squad.notebook.model.Note.Builder();
  }

  /**
   * Creates a new Note RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Note RecordBuilder
   */
  public static com.squad.notebook.model.Note.Builder newBuilder(com.squad.notebook.model.Note.Builder other) {
    if (other == null) {
      return new com.squad.notebook.model.Note.Builder();
    } else {
      return new com.squad.notebook.model.Note.Builder(other);
    }
  }

  /**
   * Creates a new Note RecordBuilder by copying an existing Note instance.
   * @param other The existing instance to copy.
   * @return A new Note RecordBuilder
   */
  public static com.squad.notebook.model.Note.Builder newBuilder(com.squad.notebook.model.Note other) {
    if (other == null) {
      return new com.squad.notebook.model.Note.Builder();
    } else {
      return new com.squad.notebook.model.Note.Builder(other);
    }
  }

  /**
   * Serializes this Note to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return noteId;
      case 1:
        return userId;
      case 2:
        return name;
      case 3:
        return groupId;
      case 4:
        return text;
      case 5:
        return isPublic;
      case 6:
        return isNotifiable;
      case 7:
        return NoteType;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$ , java.lang.Object value$) {
    switch (field$) {
      case 0:
        noteId = (java.lang.String) value$;
        break;
      case 1:
        userId = (java.lang.String) value$;
        break;
      case 2:
        name = (java.lang.String) value$;
        break;
      case 3:
        groupId = (java.lang.String) value$;
        break;
      case 4:
        text = (java.lang.String) value$;
        break;
      case 5:
        isPublic = (java.lang.Boolean) value$;
        break;
      case 6:
        isNotifiable = (java.lang.Boolean) value$;
        break;
      case 7:
        NoteType = (com.squad.notebook.model.NoteType) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'noteId' field.
   * @return The value of the 'noteId' field.
   */
  public java.lang.String getNoteId() {
    return noteId;
  }

  /**
   * Sets the value of the 'noteId' field.
   * @param value the value to set.
   */
  public void setNoteId(java.lang.String value) {
    this.noteId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'groupId' field.
   * @return The value of the 'groupId' field.
   */
  public java.lang.String getGroupId() {
    return groupId;
  }

  /**
   * Sets the value of the 'groupId' field.
   * @param value the value to set.
   */
  public void setGroupId(java.lang.String value) {
    this.groupId = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'isPublic' field.
   * @return The value of the 'isPublic' field.
   */
  public boolean getIsPublic() {
    return isPublic;
  }

  /**
   * Sets the value of the 'isPublic' field.
   * @param value the value to set.
   */
  public void setIsPublic(boolean value) {
    this.isPublic = value;
  }

  /**
   * Gets the value of the 'isNotifiable' field.
   * @return The value of the 'isNotifiable' field.
   */
  public boolean getIsNotifiable() {
    return isNotifiable;
  }

  /**
   * Sets the value of the 'isNotifiable' field.
   * @param value the value to set.
   */
  public void setIsNotifiable(boolean value) {
    this.isNotifiable = value;
  }

  /**
   * Gets the value of the 'NoteType' field.
   * @return The value of the 'NoteType' field.
   */
  public com.squad.notebook.model.NoteType getNoteType() {
    return NoteType;
  }

  /**
   * Sets the value of the 'NoteType' field.
   * @param value the value to set.
   */
  public void setNoteType(com.squad.notebook.model.NoteType value) {
    this.NoteType = value;
  }

  @Override
  public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this , SpecificData.getEncoder(out));
  }

  @Override
  public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this , SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
          throws java.io.IOException {
    out.writeString(this.noteId);

    out.writeString(this.userId);

    out.writeString(this.name);

    out.writeString(this.groupId);

    out.writeString(this.text);

    out.writeBoolean(this.isPublic);

    out.writeBoolean(this.isNotifiable);

    out.writeEnum(this.NoteType.ordinal());

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
          throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.noteId = in.readString();

      this.userId = in.readString();

      this.name = in.readString();

      this.groupId = in.readString();

      this.text = in.readString();

      this.isPublic = in.readBoolean();

      this.isNotifiable = in.readBoolean();

      this.NoteType = com.squad.notebook.model.NoteType.values()[in.readEnum()];

    } else {
      for (int i = 0 ; i < 8 ; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.noteId = in.readString();
            break;

          case 1:
            this.userId = in.readString();
            break;

          case 2:
            this.name = in.readString();
            break;

          case 3:
            this.groupId = in.readString();
            break;

          case 4:
            this.text = in.readString();
            break;

          case 5:
            this.isPublic = in.readBoolean();
            break;

          case 6:
            this.isNotifiable = in.readBoolean();
            break;

          case 7:
            this.NoteType = com.squad.notebook.model.NoteType.values()[in.readEnum()];
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }

  /**
   * RecordBuilder for Note instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Note>
          implements org.apache.avro.data.RecordBuilder<Note> {

    private java.lang.String noteId;
    private java.lang.String userId;
    private java.lang.String name;
    private java.lang.String groupId;
    private java.lang.String text;
    private boolean isPublic;
    private boolean isNotifiable;
    private com.squad.notebook.model.NoteType NoteType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.squad.notebook.model.Note.Builder other) {
      super(other);
      if (isValidValue(fields()[0] , other.noteId)) {
        this.noteId = data().deepCopy(fields()[0].schema() , other.noteId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1] , other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema() , other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2] , other.name)) {
        this.name = data().deepCopy(fields()[2].schema() , other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3] , other.groupId)) {
        this.groupId = data().deepCopy(fields()[3].schema() , other.groupId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4] , other.text)) {
        this.text = data().deepCopy(fields()[4].schema() , other.text);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5] , other.isPublic)) {
        this.isPublic = data().deepCopy(fields()[5].schema() , other.isPublic);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6] , other.isNotifiable)) {
        this.isNotifiable = data().deepCopy(fields()[6].schema() , other.isNotifiable);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7] , other.NoteType)) {
        this.NoteType = data().deepCopy(fields()[7].schema() , other.NoteType);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Note instance
     * @param other The existing instance to copy.
     */
    private Builder(com.squad.notebook.model.Note other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0] , other.noteId)) {
        this.noteId = data().deepCopy(fields()[0].schema() , other.noteId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1] , other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema() , other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2] , other.name)) {
        this.name = data().deepCopy(fields()[2].schema() , other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3] , other.groupId)) {
        this.groupId = data().deepCopy(fields()[3].schema() , other.groupId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4] , other.text)) {
        this.text = data().deepCopy(fields()[4].schema() , other.text);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5] , other.isPublic)) {
        this.isPublic = data().deepCopy(fields()[5].schema() , other.isPublic);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6] , other.isNotifiable)) {
        this.isNotifiable = data().deepCopy(fields()[6].schema() , other.isNotifiable);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7] , other.NoteType)) {
        this.NoteType = data().deepCopy(fields()[7].schema() , other.NoteType);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Gets the value of the 'noteId' field.
     * @return The value.
     */
    public java.lang.String getNoteId() {
      return noteId;
    }


    /**
     * Sets the value of the 'noteId' field.
     * @param value The value of 'noteId'.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder setNoteId(java.lang.String value) {
      validate(fields()[0] , value);
      this.noteId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'noteId' field has been set.
     * @return True if the 'noteId' field has been set, false otherwise.
     */
    public boolean hasNoteId() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'noteId' field.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder clearNoteId() {
      noteId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'userId' field.
     * @return The value.
     */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
     * Sets the value of the 'userId' field.
     * @param value The value of 'userId'.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder setUserId(java.lang.String value) {
      validate(fields()[1] , value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'userId' field has been set.
     * @return True if the 'userId' field has been set, false otherwise.
     */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'userId' field.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'name' field.
     * @return The value.
     */
    public java.lang.String getName() {
      return name;
    }


    /**
     * Sets the value of the 'name' field.
     * @param value The value of 'name'.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder setName(java.lang.String value) {
      validate(fields()[2] , value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'name' field has been set.
     * @return True if the 'name' field has been set, false otherwise.
     */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'name' field.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'groupId' field.
     * @return The value.
     */
    public java.lang.String getGroupId() {
      return groupId;
    }


    /**
     * Sets the value of the 'groupId' field.
     * @param value The value of 'groupId'.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder setGroupId(java.lang.String value) {
      validate(fields()[3] , value);
      this.groupId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'groupId' field has been set.
     * @return True if the 'groupId' field has been set, false otherwise.
     */
    public boolean hasGroupId() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'groupId' field.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder clearGroupId() {
      groupId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'text' field.
     * @return The value.
     */
    public java.lang.String getText() {
      return text;
    }


    /**
     * Sets the value of the 'text' field.
     * @param value The value of 'text'.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder setText(java.lang.String value) {
      validate(fields()[4] , value);
      this.text = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'text' field has been set.
     * @return True if the 'text' field has been set, false otherwise.
     */
    public boolean hasText() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'text' field.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder clearText() {
      text = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'isPublic' field.
     * @return The value.
     */
    public boolean getIsPublic() {
      return isPublic;
    }


    /**
     * Sets the value of the 'isPublic' field.
     * @param value The value of 'isPublic'.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder setIsPublic(boolean value) {
      validate(fields()[5] , value);
      this.isPublic = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'isPublic' field has been set.
     * @return True if the 'isPublic' field has been set, false otherwise.
     */
    public boolean hasIsPublic() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'isPublic' field.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder clearIsPublic() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'isNotifiable' field.
     * @return The value.
     */
    public boolean getIsNotifiable() {
      return isNotifiable;
    }


    /**
     * Sets the value of the 'isNotifiable' field.
     * @param value The value of 'isNotifiable'.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder setIsNotifiable(boolean value) {
      validate(fields()[6] , value);
      this.isNotifiable = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'isNotifiable' field has been set.
     * @return True if the 'isNotifiable' field has been set, false otherwise.
     */
    public boolean hasIsNotifiable() {
      return fieldSetFlags()[6];
    }


    /**
     * Clears the value of the 'isNotifiable' field.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder clearIsNotifiable() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
     * Gets the value of the 'NoteType' field.
     * @return The value.
     */
    public com.squad.notebook.model.NoteType getNoteType() {
      return NoteType;
    }


    /**
     * Sets the value of the 'NoteType' field.
     * @param value The value of 'NoteType'.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder setNoteType(com.squad.notebook.model.NoteType value) {
      validate(fields()[7] , value);
      this.NoteType = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
     * Checks whether the 'NoteType' field has been set.
     * @return True if the 'NoteType' field has been set, false otherwise.
     */
    public boolean hasNoteType() {
      return fieldSetFlags()[7];
    }


    /**
     * Clears the value of the 'NoteType' field.
     * @return This builder.
     */
    public com.squad.notebook.model.Note.Builder clearNoteType() {
      NoteType = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Note build() {
      try {
        Note record = new Note();
        record.noteId = fieldSetFlags()[0] ? this.noteId : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.groupId = fieldSetFlags()[3] ? this.groupId : (java.lang.String) defaultValue(fields()[3]);
        record.text = fieldSetFlags()[4] ? this.text : (java.lang.String) defaultValue(fields()[4]);
        record.isPublic = fieldSetFlags()[5] ? this.isPublic : (java.lang.Boolean) defaultValue(fields()[5]);
        record.isNotifiable = fieldSetFlags()[6] ? this.isNotifiable : (java.lang.Boolean) defaultValue(fields()[6]);
        record.NoteType = fieldSetFlags()[7] ? this.NoteType : (com.squad.notebook.model.NoteType) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}










