/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.squad.notebook.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class NotebookEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NotebookEvent\",\"namespace\":\"com.squad.notebook.model\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"notebook\",\"type\":{\"type\":\"record\",\"name\":\"Notebook\",\"fields\":[{\"name\":\"notebookId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"noteId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isPublic\",\"type\":\"boolean\"},{\"name\":\"NotebookType\",\"type\":{\"type\":\"enum\",\"name\":\"NotebookType\",\"symbols\":[\"NOTEBOOK\",\"GROUP_NOTEBOOK\"]}}]}},{\"name\":\"NotebookEventType\",\"type\":{\"type\":\"enum\",\"name\":\"NotebookEventType\",\"symbols\":[\"NOTEBOOK_CREATED\",\"NOTEBOOK_UPDATED\",\"NOTEBOOK_DELETED\"]}}]}");
  private static final long serialVersionUID = 8598013745964842693L;
  private static SpecificData MODEL$ = new SpecificData();
  private static final BinaryMessageEncoder<NotebookEvent> ENCODER =
          new BinaryMessageEncoder<NotebookEvent>(MODEL$ , SCHEMA$);
  private static final BinaryMessageDecoder<NotebookEvent> DECODER =
          new BinaryMessageDecoder<NotebookEvent>(MODEL$ , SCHEMA$);
  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NotebookEvent>
          WRITER$ = (org.apache.avro.io.DatumWriter<NotebookEvent>) MODEL$.createDatumWriter(SCHEMA$);
  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NotebookEvent>
          READER$ = (org.apache.avro.io.DatumReader<NotebookEvent>) MODEL$.createDatumReader(SCHEMA$);
  @Deprecated
  public java.lang.String eventId;
  @Deprecated
  public com.squad.notebook.model.Notebook notebook;
  @Deprecated
  public com.squad.notebook.model.NotebookEventType NotebookEventType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NotebookEvent() {
  }

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param notebook The new value for notebook
   * @param NotebookEventType The new value for NotebookEventType
   */
  public NotebookEvent(java.lang.String eventId , com.squad.notebook.model.Notebook notebook , com.squad.notebook.model.NotebookEventType NotebookEventType) {
    this.eventId = eventId;
    this.notebook = notebook;
    this.NotebookEventType = NotebookEventType;
  }

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NotebookEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NotebookEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NotebookEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NotebookEvent>(MODEL$ , SCHEMA$ , resolver);
  }

  /**
   * Deserializes a NotebookEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NotebookEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NotebookEvent fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /**
   * Creates a new NotebookEvent RecordBuilder.
   * @return A new NotebookEvent RecordBuilder
   */
  public static com.squad.notebook.model.NotebookEvent.Builder newBuilder() {
    return new com.squad.notebook.model.NotebookEvent.Builder();
  }

  /**
   * Creates a new NotebookEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NotebookEvent RecordBuilder
   */
  public static com.squad.notebook.model.NotebookEvent.Builder newBuilder(com.squad.notebook.model.NotebookEvent.Builder other) {
    if (other == null) {
      return new com.squad.notebook.model.NotebookEvent.Builder();
    } else {
      return new com.squad.notebook.model.NotebookEvent.Builder(other);
    }
  }

  /**
   * Creates a new NotebookEvent RecordBuilder by copying an existing NotebookEvent instance.
   * @param other The existing instance to copy.
   * @return A new NotebookEvent RecordBuilder
   */
  public static com.squad.notebook.model.NotebookEvent.Builder newBuilder(com.squad.notebook.model.NotebookEvent other) {
    if (other == null) {
      return new com.squad.notebook.model.NotebookEvent.Builder();
    } else {
      return new com.squad.notebook.model.NotebookEvent.Builder(other);
    }
  }

  /**
   * Serializes this NotebookEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return eventId;
      case 1:
        return notebook;
      case 2:
        return NotebookEventType;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$ , java.lang.Object value$) {
    switch (field$) {
      case 0:
        eventId = (java.lang.String) value$;
        break;
      case 1:
        notebook = (com.squad.notebook.model.Notebook) value$;
        break;
      case 2:
        NotebookEventType = (com.squad.notebook.model.NotebookEventType) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'notebook' field.
   * @return The value of the 'notebook' field.
   */
  public com.squad.notebook.model.Notebook getNotebook() {
    return notebook;
  }

  /**
   * Sets the value of the 'notebook' field.
   * @param value the value to set.
   */
  public void setNotebook(com.squad.notebook.model.Notebook value) {
    this.notebook = value;
  }

  /**
   * Gets the value of the 'NotebookEventType' field.
   * @return The value of the 'NotebookEventType' field.
   */
  public com.squad.notebook.model.NotebookEventType getNotebookEventType() {
    return NotebookEventType;
  }

  /**
   * Sets the value of the 'NotebookEventType' field.
   * @param value the value to set.
   */
  public void setNotebookEventType(com.squad.notebook.model.NotebookEventType value) {
    this.NotebookEventType = value;
  }

  @Override
  public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this , SpecificData.getEncoder(out));
  }

  @Override
  public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this , SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
          throws java.io.IOException {
    out.writeString(this.eventId);

    this.notebook.customEncode(out);

    out.writeEnum(this.NotebookEventType.ordinal());

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
          throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString();

      if (this.notebook == null) {
        this.notebook = new com.squad.notebook.model.Notebook();
      }
      this.notebook.customDecode(in);

      this.NotebookEventType = com.squad.notebook.model.NotebookEventType.values()[in.readEnum()];

    } else {
      for (int i = 0 ; i < 3 ; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.eventId = in.readString();
            break;

          case 1:
            if (this.notebook == null) {
              this.notebook = new com.squad.notebook.model.Notebook();
            }
            this.notebook.customDecode(in);
            break;

          case 2:
            this.NotebookEventType = com.squad.notebook.model.NotebookEventType.values()[in.readEnum()];
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }

  /**
   * RecordBuilder for NotebookEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotebookEvent>
          implements org.apache.avro.data.RecordBuilder<NotebookEvent> {

    private java.lang.String eventId;
    private com.squad.notebook.model.Notebook notebook;
    private com.squad.notebook.model.Notebook.Builder notebookBuilder;
    private com.squad.notebook.model.NotebookEventType NotebookEventType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.squad.notebook.model.NotebookEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0] , other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema() , other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1] , other.notebook)) {
        this.notebook = data().deepCopy(fields()[1].schema() , other.notebook);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasNotebookBuilder()) {
        this.notebookBuilder = com.squad.notebook.model.Notebook.newBuilder(other.getNotebookBuilder());
      }
      if (isValidValue(fields()[2] , other.NotebookEventType)) {
        this.NotebookEventType = data().deepCopy(fields()[2].schema() , other.NotebookEventType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing NotebookEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.squad.notebook.model.NotebookEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0] , other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema() , other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1] , other.notebook)) {
        this.notebook = data().deepCopy(fields()[1].schema() , other.notebook);
        fieldSetFlags()[1] = true;
      }
      this.notebookBuilder = null;
      if (isValidValue(fields()[2] , other.NotebookEventType)) {
        this.NotebookEventType = data().deepCopy(fields()[2].schema() , other.NotebookEventType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'eventId' field.
     * @return The value.
     */
    public java.lang.String getEventId() {
      return eventId;
    }


    /**
     * Sets the value of the 'eventId' field.
     * @param value The value of 'eventId'.
     * @return This builder.
     */
    public com.squad.notebook.model.NotebookEvent.Builder setEventId(java.lang.String value) {
      validate(fields()[0] , value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'eventId' field has been set.
     * @return True if the 'eventId' field has been set, false otherwise.
     */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'eventId' field.
     * @return This builder.
     */
    public com.squad.notebook.model.NotebookEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'notebook' field.
     * @return The value.
     */
    public com.squad.notebook.model.Notebook getNotebook() {
      return notebook;
    }


    /**
     * Sets the value of the 'notebook' field.
     * @param value The value of 'notebook'.
     * @return This builder.
     */
    public com.squad.notebook.model.NotebookEvent.Builder setNotebook(com.squad.notebook.model.Notebook value) {
      validate(fields()[1] , value);
      this.notebookBuilder = null;
      this.notebook = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'notebook' field has been set.
     * @return True if the 'notebook' field has been set, false otherwise.
     */
    public boolean hasNotebook() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'notebook' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.squad.notebook.model.Notebook.Builder getNotebookBuilder() {
      if (notebookBuilder == null) {
        if (hasNotebook()) {
          setNotebookBuilder(com.squad.notebook.model.Notebook.newBuilder(notebook));
        } else {
          setNotebookBuilder(com.squad.notebook.model.Notebook.newBuilder());
        }
      }
      return notebookBuilder;
    }

    /**
     * Sets the Builder instance for the 'notebook' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.squad.notebook.model.NotebookEvent.Builder setNotebookBuilder(com.squad.notebook.model.Notebook.Builder value) {
      clearNotebook();
      notebookBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'notebook' field has an active Builder instance
     * @return True if the 'notebook' field has an active Builder instance
     */
    public boolean hasNotebookBuilder() {
      return notebookBuilder != null;
    }

    /**
     * Clears the value of the 'notebook' field.
     * @return This builder.
     */
    public com.squad.notebook.model.NotebookEvent.Builder clearNotebook() {
      notebook = null;
      notebookBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'NotebookEventType' field.
     * @return The value.
     */
    public com.squad.notebook.model.NotebookEventType getNotebookEventType() {
      return NotebookEventType;
    }


    /**
     * Sets the value of the 'NotebookEventType' field.
     * @param value The value of 'NotebookEventType'.
     * @return This builder.
     */
    public com.squad.notebook.model.NotebookEvent.Builder setNotebookEventType(com.squad.notebook.model.NotebookEventType value) {
      validate(fields()[2] , value);
      this.NotebookEventType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'NotebookEventType' field has been set.
     * @return True if the 'NotebookEventType' field has been set, false otherwise.
     */
    public boolean hasNotebookEventType() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'NotebookEventType' field.
     * @return This builder.
     */
    public com.squad.notebook.model.NotebookEvent.Builder clearNotebookEventType() {
      NotebookEventType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NotebookEvent build() {
      try {
        NotebookEvent record = new NotebookEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        if (notebookBuilder != null) {
          try {
            record.notebook = this.notebookBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("notebook"));
            throw e;
          }
        } else {
          record.notebook = fieldSetFlags()[1] ? this.notebook : (com.squad.notebook.model.Notebook) defaultValue(fields()[1]);
        }
        record.NotebookEventType = fieldSetFlags()[2] ? this.NotebookEventType : (com.squad.notebook.model.NotebookEventType) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}










