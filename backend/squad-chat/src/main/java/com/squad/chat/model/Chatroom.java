/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.squad.chat.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Chatroom extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8193702036560000499L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Chatroom\",\"namespace\":\"com.squad.chat.model\",\"fields\":[{\"name\":\"chatroomId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"messageId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isPublic\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Chatroom> ENCODER =
      new BinaryMessageEncoder<Chatroom>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Chatroom> DECODER =
      new BinaryMessageDecoder<Chatroom>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Chatroom> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Chatroom> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Chatroom> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Chatroom>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Chatroom to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Chatroom from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Chatroom instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Chatroom fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String chatroomId;
  @Deprecated public java.lang.String userId;
  @Deprecated public java.lang.String messageId;
  @Deprecated public boolean isPublic;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Chatroom() {}

  /**
   * All-args constructor.
   * @param chatroomId The new value for chatroomId
   * @param userId The new value for userId
   * @param messageId The new value for messageId
   * @param isPublic The new value for isPublic
   */
  public Chatroom(java.lang.String chatroomId, java.lang.String userId, java.lang.String messageId, java.lang.Boolean isPublic) {
    this.chatroomId = chatroomId;
    this.userId = userId;
    this.messageId = messageId;
    this.isPublic = isPublic;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chatroomId;
    case 1: return userId;
    case 2: return messageId;
    case 3: return isPublic;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chatroomId = (java.lang.String)value$; break;
    case 1: userId = (java.lang.String)value$; break;
    case 2: messageId = (java.lang.String)value$; break;
    case 3: isPublic = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'chatroomId' field.
   * @return The value of the 'chatroomId' field.
   */
  public java.lang.String getChatroomId() {
    return chatroomId;
  }


  /**
   * Sets the value of the 'chatroomId' field.
   * @param value the value to set.
   */
  public void setChatroomId(java.lang.String value) {
    this.chatroomId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'messageId' field.
   * @return The value of the 'messageId' field.
   */
  public java.lang.String getMessageId() {
    return messageId;
  }


  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.String value) {
    this.messageId = value;
  }

  /**
   * Gets the value of the 'isPublic' field.
   * @return The value of the 'isPublic' field.
   */
  public boolean getIsPublic() {
    return isPublic;
  }


  /**
   * Sets the value of the 'isPublic' field.
   * @param value the value to set.
   */
  public void setIsPublic(boolean value) {
    this.isPublic = value;
  }

  /**
   * Creates a new Chatroom RecordBuilder.
   * @return A new Chatroom RecordBuilder
   */
  public static com.squad.chat.model.Chatroom.Builder newBuilder() {
    return new com.squad.chat.model.Chatroom.Builder();
  }

  /**
   * Creates a new Chatroom RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Chatroom RecordBuilder
   */
  public static com.squad.chat.model.Chatroom.Builder newBuilder(com.squad.chat.model.Chatroom.Builder other) {
    if (other == null) {
      return new com.squad.chat.model.Chatroom.Builder();
    } else {
      return new com.squad.chat.model.Chatroom.Builder(other);
    }
  }

  /**
   * Creates a new Chatroom RecordBuilder by copying an existing Chatroom instance.
   * @param other The existing instance to copy.
   * @return A new Chatroom RecordBuilder
   */
  public static com.squad.chat.model.Chatroom.Builder newBuilder(com.squad.chat.model.Chatroom other) {
    if (other == null) {
      return new com.squad.chat.model.Chatroom.Builder();
    } else {
      return new com.squad.chat.model.Chatroom.Builder(other);
    }
  }

  /**
   * RecordBuilder for Chatroom instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Chatroom>
    implements org.apache.avro.data.RecordBuilder<Chatroom> {

    private java.lang.String chatroomId;
    private java.lang.String userId;
    private java.lang.String messageId;
    private boolean isPublic;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.squad.chat.model.Chatroom.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chatroomId)) {
        this.chatroomId = data().deepCopy(fields()[0].schema(), other.chatroomId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.messageId)) {
        this.messageId = data().deepCopy(fields()[2].schema(), other.messageId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.isPublic)) {
        this.isPublic = data().deepCopy(fields()[3].schema(), other.isPublic);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Chatroom instance
     * @param other The existing instance to copy.
     */
    private Builder(com.squad.chat.model.Chatroom other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.chatroomId)) {
        this.chatroomId = data().deepCopy(fields()[0].schema(), other.chatroomId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.messageId)) {
        this.messageId = data().deepCopy(fields()[2].schema(), other.messageId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isPublic)) {
        this.isPublic = data().deepCopy(fields()[3].schema(), other.isPublic);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'chatroomId' field.
      * @return The value.
      */
    public java.lang.String getChatroomId() {
      return chatroomId;
    }


    /**
      * Sets the value of the 'chatroomId' field.
      * @param value The value of 'chatroomId'.
      * @return This builder.
      */
    public com.squad.chat.model.Chatroom.Builder setChatroomId(java.lang.String value) {
      validate(fields()[0], value);
      this.chatroomId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'chatroomId' field has been set.
      * @return True if the 'chatroomId' field has been set, false otherwise.
      */
    public boolean hasChatroomId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'chatroomId' field.
      * @return This builder.
      */
    public com.squad.chat.model.Chatroom.Builder clearChatroomId() {
      chatroomId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.squad.chat.model.Chatroom.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.squad.chat.model.Chatroom.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'messageId' field.
      * @return The value.
      */
    public java.lang.String getMessageId() {
      return messageId;
    }


    /**
      * Sets the value of the 'messageId' field.
      * @param value The value of 'messageId'.
      * @return This builder.
      */
    public com.squad.chat.model.Chatroom.Builder setMessageId(java.lang.String value) {
      validate(fields()[2], value);
      this.messageId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'messageId' field has been set.
      * @return True if the 'messageId' field has been set, false otherwise.
      */
    public boolean hasMessageId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'messageId' field.
      * @return This builder.
      */
    public com.squad.chat.model.Chatroom.Builder clearMessageId() {
      messageId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isPublic' field.
      * @return The value.
      */
    public boolean getIsPublic() {
      return isPublic;
    }


    /**
      * Sets the value of the 'isPublic' field.
      * @param value The value of 'isPublic'.
      * @return This builder.
      */
    public com.squad.chat.model.Chatroom.Builder setIsPublic(boolean value) {
      validate(fields()[3], value);
      this.isPublic = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isPublic' field has been set.
      * @return True if the 'isPublic' field has been set, false otherwise.
      */
    public boolean hasIsPublic() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isPublic' field.
      * @return This builder.
      */
    public com.squad.chat.model.Chatroom.Builder clearIsPublic() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Chatroom build() {
      try {
        Chatroom record = new Chatroom();
        record.chatroomId = fieldSetFlags()[0] ? this.chatroomId : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        record.messageId = fieldSetFlags()[2] ? this.messageId : (java.lang.String) defaultValue(fields()[2]);
        record.isPublic = fieldSetFlags()[3] ? this.isPublic : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Chatroom>
    WRITER$ = (org.apache.avro.io.DatumWriter<Chatroom>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Chatroom>
    READER$ = (org.apache.avro.io.DatumReader<Chatroom>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.chatroomId);

    out.writeString(this.userId);

    out.writeString(this.messageId);

    out.writeBoolean(this.isPublic);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.chatroomId = in.readString();

      this.userId = in.readString();

      this.messageId = in.readString();

      this.isPublic = in.readBoolean();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.chatroomId = in.readString();
          break;

        case 1:
          this.userId = in.readString();
          break;

        case 2:
          this.messageId = in.readString();
          break;

        case 3:
          this.isPublic = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










