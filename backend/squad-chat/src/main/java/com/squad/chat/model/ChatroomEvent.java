/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.squad.chat.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ChatroomEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2793524346928797752L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChatroomEvent\",\"namespace\":\"com.squad.chat.model\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"chatroom\",\"type\":{\"type\":\"record\",\"name\":\"Chatroom\",\"fields\":[{\"name\":\"chatroomId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"messageId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isPublic\",\"type\":\"boolean\"}]}},{\"name\":\"ChatroomEventType\",\"type\":{\"type\":\"enum\",\"name\":\"ChatroomEventType\",\"symbols\":[\"CHATROOM_CREATED\",\"CHATROOM_UPDATED\",\"CHATROOM_USER_ADDED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChatroomEvent> ENCODER =
      new BinaryMessageEncoder<ChatroomEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChatroomEvent> DECODER =
      new BinaryMessageDecoder<ChatroomEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ChatroomEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ChatroomEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ChatroomEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ChatroomEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ChatroomEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ChatroomEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ChatroomEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ChatroomEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String eventId;
  @Deprecated public com.squad.chat.model.Chatroom chatroom;
  @Deprecated public com.squad.chat.model.ChatroomEventType ChatroomEventType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChatroomEvent() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param chatroom The new value for chatroom
   * @param ChatroomEventType The new value for ChatroomEventType
   */
  public ChatroomEvent(java.lang.String eventId, com.squad.chat.model.Chatroom chatroom, com.squad.chat.model.ChatroomEventType ChatroomEventType) {
    this.eventId = eventId;
    this.chatroom = chatroom;
    this.ChatroomEventType = ChatroomEventType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return chatroom;
    case 2: return ChatroomEventType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.lang.String)value$; break;
    case 1: chatroom = (com.squad.chat.model.Chatroom)value$; break;
    case 2: ChatroomEventType = (com.squad.chat.model.ChatroomEventType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'chatroom' field.
   * @return The value of the 'chatroom' field.
   */
  public com.squad.chat.model.Chatroom getChatroom() {
    return chatroom;
  }


  /**
   * Sets the value of the 'chatroom' field.
   * @param value the value to set.
   */
  public void setChatroom(com.squad.chat.model.Chatroom value) {
    this.chatroom = value;
  }

  /**
   * Gets the value of the 'ChatroomEventType' field.
   * @return The value of the 'ChatroomEventType' field.
   */
  public com.squad.chat.model.ChatroomEventType getChatroomEventType() {
    return ChatroomEventType;
  }


  /**
   * Sets the value of the 'ChatroomEventType' field.
   * @param value the value to set.
   */
  public void setChatroomEventType(com.squad.chat.model.ChatroomEventType value) {
    this.ChatroomEventType = value;
  }

  /**
   * Creates a new ChatroomEvent RecordBuilder.
   * @return A new ChatroomEvent RecordBuilder
   */
  public static com.squad.chat.model.ChatroomEvent.Builder newBuilder() {
    return new com.squad.chat.model.ChatroomEvent.Builder();
  }

  /**
   * Creates a new ChatroomEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChatroomEvent RecordBuilder
   */
  public static com.squad.chat.model.ChatroomEvent.Builder newBuilder(com.squad.chat.model.ChatroomEvent.Builder other) {
    if (other == null) {
      return new com.squad.chat.model.ChatroomEvent.Builder();
    } else {
      return new com.squad.chat.model.ChatroomEvent.Builder(other);
    }
  }

  /**
   * Creates a new ChatroomEvent RecordBuilder by copying an existing ChatroomEvent instance.
   * @param other The existing instance to copy.
   * @return A new ChatroomEvent RecordBuilder
   */
  public static com.squad.chat.model.ChatroomEvent.Builder newBuilder(com.squad.chat.model.ChatroomEvent other) {
    if (other == null) {
      return new com.squad.chat.model.ChatroomEvent.Builder();
    } else {
      return new com.squad.chat.model.ChatroomEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ChatroomEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChatroomEvent>
    implements org.apache.avro.data.RecordBuilder<ChatroomEvent> {

    private java.lang.String eventId;
    private com.squad.chat.model.Chatroom chatroom;
    private com.squad.chat.model.Chatroom.Builder chatroomBuilder;
    private com.squad.chat.model.ChatroomEventType ChatroomEventType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.squad.chat.model.ChatroomEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.chatroom)) {
        this.chatroom = data().deepCopy(fields()[1].schema(), other.chatroom);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasChatroomBuilder()) {
        this.chatroomBuilder = com.squad.chat.model.Chatroom.newBuilder(other.getChatroomBuilder());
      }
      if (isValidValue(fields()[2], other.ChatroomEventType)) {
        this.ChatroomEventType = data().deepCopy(fields()[2].schema(), other.ChatroomEventType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ChatroomEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.squad.chat.model.ChatroomEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chatroom)) {
        this.chatroom = data().deepCopy(fields()[1].schema(), other.chatroom);
        fieldSetFlags()[1] = true;
      }
      this.chatroomBuilder = null;
      if (isValidValue(fields()[2], other.ChatroomEventType)) {
        this.ChatroomEventType = data().deepCopy(fields()[2].schema(), other.ChatroomEventType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.String getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.squad.chat.model.ChatroomEvent.Builder setEventId(java.lang.String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.squad.chat.model.ChatroomEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'chatroom' field.
      * @return The value.
      */
    public com.squad.chat.model.Chatroom getChatroom() {
      return chatroom;
    }


    /**
      * Sets the value of the 'chatroom' field.
      * @param value The value of 'chatroom'.
      * @return This builder.
      */
    public com.squad.chat.model.ChatroomEvent.Builder setChatroom(com.squad.chat.model.Chatroom value) {
      validate(fields()[1], value);
      this.chatroomBuilder = null;
      this.chatroom = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'chatroom' field has been set.
      * @return True if the 'chatroom' field has been set, false otherwise.
      */
    public boolean hasChatroom() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'chatroom' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.squad.chat.model.Chatroom.Builder getChatroomBuilder() {
      if (chatroomBuilder == null) {
        if (hasChatroom()) {
          setChatroomBuilder(com.squad.chat.model.Chatroom.newBuilder(chatroom));
        } else {
          setChatroomBuilder(com.squad.chat.model.Chatroom.newBuilder());
        }
      }
      return chatroomBuilder;
    }

    /**
     * Sets the Builder instance for the 'chatroom' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.squad.chat.model.ChatroomEvent.Builder setChatroomBuilder(com.squad.chat.model.Chatroom.Builder value) {
      clearChatroom();
      chatroomBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'chatroom' field has an active Builder instance
     * @return True if the 'chatroom' field has an active Builder instance
     */
    public boolean hasChatroomBuilder() {
      return chatroomBuilder != null;
    }

    /**
      * Clears the value of the 'chatroom' field.
      * @return This builder.
      */
    public com.squad.chat.model.ChatroomEvent.Builder clearChatroom() {
      chatroom = null;
      chatroomBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ChatroomEventType' field.
      * @return The value.
      */
    public com.squad.chat.model.ChatroomEventType getChatroomEventType() {
      return ChatroomEventType;
    }


    /**
      * Sets the value of the 'ChatroomEventType' field.
      * @param value The value of 'ChatroomEventType'.
      * @return This builder.
      */
    public com.squad.chat.model.ChatroomEvent.Builder setChatroomEventType(com.squad.chat.model.ChatroomEventType value) {
      validate(fields()[2], value);
      this.ChatroomEventType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ChatroomEventType' field has been set.
      * @return True if the 'ChatroomEventType' field has been set, false otherwise.
      */
    public boolean hasChatroomEventType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ChatroomEventType' field.
      * @return This builder.
      */
    public com.squad.chat.model.ChatroomEvent.Builder clearChatroomEventType() {
      ChatroomEventType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChatroomEvent build() {
      try {
        ChatroomEvent record = new ChatroomEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        if (chatroomBuilder != null) {
          try {
            record.chatroom = this.chatroomBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("chatroom"));
            throw e;
          }
        } else {
          record.chatroom = fieldSetFlags()[1] ? this.chatroom : (com.squad.chat.model.Chatroom) defaultValue(fields()[1]);
        }
        record.ChatroomEventType = fieldSetFlags()[2] ? this.ChatroomEventType : (com.squad.chat.model.ChatroomEventType) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChatroomEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChatroomEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChatroomEvent>
    READER$ = (org.apache.avro.io.DatumReader<ChatroomEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventId);

    this.chatroom.customEncode(out);

    out.writeEnum(this.ChatroomEventType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString();

      if (this.chatroom == null) {
        this.chatroom = new com.squad.chat.model.Chatroom();
      }
      this.chatroom.customDecode(in);

      this.ChatroomEventType = com.squad.chat.model.ChatroomEventType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventId = in.readString();
          break;

        case 1:
          if (this.chatroom == null) {
            this.chatroom = new com.squad.chat.model.Chatroom();
          }
          this.chatroom.customDecode(in);
          break;

        case 2:
          this.ChatroomEventType = com.squad.chat.model.ChatroomEventType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










