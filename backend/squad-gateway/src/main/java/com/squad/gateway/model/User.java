/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.squad.gateway.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.squad.gateway.model\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"givenName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"familyName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gender\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"birthdate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"issuedAt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"expiresIn\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"authTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"imageUrl\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
    private static final long serialVersionUID = 5569396058858763108L;
    private static final SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<User> ENCODER =
            new BinaryMessageEncoder<User>(MODEL$ , SCHEMA$);
    private static final BinaryMessageDecoder<User> DECODER =
            new BinaryMessageDecoder<User>(MODEL$ , SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<User>
            WRITER$ = (org.apache.avro.io.DatumWriter<User>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<User>
            READER$ = (org.apache.avro.io.DatumReader<User>) MODEL$.createDatumReader(SCHEMA$);
    @Deprecated
    public java.lang.String userId;
    @Deprecated
    public java.lang.String givenName;
    @Deprecated
    public java.lang.String familyName;
    @Deprecated
    public java.lang.String username;
    @Deprecated
    public java.lang.String email;
    @Deprecated
    public java.lang.String gender;
    @Deprecated
    public java.lang.String birthdate;
    @Deprecated
    public java.lang.String issuedAt;
    @Deprecated
    public java.lang.String expiresIn;
    @Deprecated
    public java.lang.String authTime;
    @Deprecated
    public java.lang.String imageUrl;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public User() {
    }

    /**
     * All-args constructor.
     *
     * @param userId     The new value for userId
     * @param givenName  The new value for givenName
     * @param familyName The new value for familyName
     * @param username   The new value for username
     * @param email      The new value for email
     * @param gender     The new value for gender
     * @param birthdate  The new value for birthdate
     * @param issuedAt   The new value for issuedAt
     * @param expiresIn  The new value for expiresIn
     * @param authTime   The new value for authTime
     * @param imageUrl   The new value for imageUrl
     */
    public User(java.lang.String userId , java.lang.String givenName , java.lang.String familyName , java.lang.String username , java.lang.String email , java.lang.String gender , java.lang.String birthdate , java.lang.String issuedAt , java.lang.String expiresIn , java.lang.String authTime , java.lang.String imageUrl) {
        this.userId = userId;
        this.givenName = givenName;
        this.familyName = familyName;
        this.username = username;
        this.email = email;
        this.gender = gender;
        this.birthdate = birthdate;
        this.issuedAt = issuedAt;
        this.expiresIn = expiresIn;
        this.authTime = authTime;
        this.imageUrl = imageUrl;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<User> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<User> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     *
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<User>(MODEL$ , SCHEMA$ , resolver);
    }

    /**
     * Deserializes a User from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     *
     * @return a User instance decoded from the given buffer
     *
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static User fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new User RecordBuilder.
     *
     * @return A new User RecordBuilder
     */
    public static com.squad.gateway.model.User.Builder newBuilder() {
        return new com.squad.gateway.model.User.Builder();
    }

    /**
     * Creates a new User RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     *
     * @return A new User RecordBuilder
     */
    public static com.squad.gateway.model.User.Builder newBuilder(com.squad.gateway.model.User.Builder other) {
        if (other == null) {
            return new com.squad.gateway.model.User.Builder();
        } else {
            return new com.squad.gateway.model.User.Builder(other);
        }
    }

    /**
     * Creates a new User RecordBuilder by copying an existing User instance.
     *
     * @param other The existing instance to copy.
     *
     * @return A new User RecordBuilder
     */
    public static com.squad.gateway.model.User.Builder newBuilder(com.squad.gateway.model.User other) {
        if (other == null) {
            return new com.squad.gateway.model.User.Builder();
        } else {
            return new com.squad.gateway.model.User.Builder(other);
        }
    }

    /**
     * Serializes this User to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     *
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return userId;
            case 1:
                return givenName;
            case 2:
                return familyName;
            case 3:
                return username;
            case 4:
                return email;
            case 5:
                return gender;
            case 6:
                return birthdate;
            case 7:
                return issuedAt;
            case 8:
                return expiresIn;
            case 9:
                return authTime;
            case 10:
                return imageUrl;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$ , java.lang.Object value$) {
        switch (field$) {
            case 0:
                userId = (java.lang.String) value$;
                break;
            case 1:
                givenName = (java.lang.String) value$;
                break;
            case 2:
                familyName = (java.lang.String) value$;
                break;
            case 3:
                username = (java.lang.String) value$;
                break;
            case 4:
                email = (java.lang.String) value$;
                break;
            case 5:
                gender = (java.lang.String) value$;
                break;
            case 6:
                birthdate = (java.lang.String) value$;
                break;
            case 7:
                issuedAt = (java.lang.String) value$;
                break;
            case 8:
                expiresIn = (java.lang.String) value$;
                break;
            case 9:
                authTime = (java.lang.String) value$;
                break;
            case 10:
                imageUrl = (java.lang.String) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'userId' field.
     *
     * @return The value of the 'userId' field.
     */
    public java.lang.String getUserId() {
        return userId;
    }

    /**
     * Sets the value of the 'userId' field.
     *
     * @param value the value to set.
     */
    public void setUserId(java.lang.String value) {
        this.userId = value;
    }

    /**
     * Gets the value of the 'givenName' field.
     *
     * @return The value of the 'givenName' field.
     */
    public java.lang.String getGivenName() {
        return givenName;
    }

    /**
     * Sets the value of the 'givenName' field.
     *
     * @param value the value to set.
     */
    public void setGivenName(java.lang.String value) {
        this.givenName = value;
    }

    /**
     * Gets the value of the 'familyName' field.
     *
     * @return The value of the 'familyName' field.
     */
    public java.lang.String getFamilyName() {
        return familyName;
    }

    /**
     * Sets the value of the 'familyName' field.
     *
     * @param value the value to set.
     */
    public void setFamilyName(java.lang.String value) {
        this.familyName = value;
    }

    /**
     * Gets the value of the 'username' field.
     *
     * @return The value of the 'username' field.
     */
    public java.lang.String getUsername() {
        return username;
    }

    /**
     * Sets the value of the 'username' field.
     *
     * @param value the value to set.
     */
    public void setUsername(java.lang.String value) {
        this.username = value;
    }

    /**
     * Gets the value of the 'email' field.
     *
     * @return The value of the 'email' field.
     */
    public java.lang.String getEmail() {
        return email;
    }

    /**
     * Sets the value of the 'email' field.
     *
     * @param value the value to set.
     */
    public void setEmail(java.lang.String value) {
        this.email = value;
    }

    /**
     * Gets the value of the 'gender' field.
     *
     * @return The value of the 'gender' field.
     */
    public java.lang.String getGender() {
        return gender;
    }

    /**
     * Sets the value of the 'gender' field.
     *
     * @param value the value to set.
     */
    public void setGender(java.lang.String value) {
        this.gender = value;
    }

    /**
     * Gets the value of the 'birthdate' field.
     *
     * @return The value of the 'birthdate' field.
     */
    public java.lang.String getBirthdate() {
        return birthdate;
    }

    /**
     * Sets the value of the 'birthdate' field.
     *
     * @param value the value to set.
     */
    public void setBirthdate(java.lang.String value) {
        this.birthdate = value;
    }

    /**
     * Gets the value of the 'issuedAt' field.
     *
     * @return The value of the 'issuedAt' field.
     */
    public java.lang.String getIssuedAt() {
        return issuedAt;
    }

    /**
     * Sets the value of the 'issuedAt' field.
     *
     * @param value the value to set.
     */
    public void setIssuedAt(java.lang.String value) {
        this.issuedAt = value;
    }

    /**
     * Gets the value of the 'expiresIn' field.
     *
     * @return The value of the 'expiresIn' field.
     */
    public java.lang.String getExpiresIn() {
        return expiresIn;
    }

    /**
     * Sets the value of the 'expiresIn' field.
     *
     * @param value the value to set.
     */
    public void setExpiresIn(java.lang.String value) {
        this.expiresIn = value;
    }

    /**
     * Gets the value of the 'authTime' field.
     *
     * @return The value of the 'authTime' field.
     */
    public java.lang.String getAuthTime() {
        return authTime;
    }

    /**
     * Sets the value of the 'authTime' field.
     *
     * @param value the value to set.
     */
    public void setAuthTime(java.lang.String value) {
        this.authTime = value;
    }

    /**
     * Gets the value of the 'imageUrl' field.
     *
     * @return The value of the 'imageUrl' field.
     */
    public java.lang.String getImageUrl() {
        return imageUrl;
    }

    /**
     * Sets the value of the 'imageUrl' field.
     *
     * @param value the value to set.
     */
    public void setImageUrl(java.lang.String value) {
        this.imageUrl = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this , SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this , SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.userId);

        out.writeString(this.givenName);

        out.writeString(this.familyName);

        out.writeString(this.username);

        out.writeString(this.email);

        out.writeString(this.gender);

        out.writeString(this.birthdate);

        out.writeString(this.issuedAt);

        out.writeString(this.expiresIn);

        out.writeString(this.authTime);

        if (this.imageUrl == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            out.writeString(this.imageUrl);
        }

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.userId = in.readString();

            this.givenName = in.readString();

            this.familyName = in.readString();

            this.username = in.readString();

            this.email = in.readString();

            this.gender = in.readString();

            this.birthdate = in.readString();

            this.issuedAt = in.readString();

            this.expiresIn = in.readString();

            this.authTime = in.readString();

            if (in.readIndex() != 0) {
                in.readNull();
                this.imageUrl = null;
            } else {
                this.imageUrl = in.readString();
            }

        } else {
            for (int i = 0 ; i < 11 ; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.userId = in.readString();
                        break;

                    case 1:
                        this.givenName = in.readString();
                        break;

                    case 2:
                        this.familyName = in.readString();
                        break;

                    case 3:
                        this.username = in.readString();
                        break;

                    case 4:
                        this.email = in.readString();
                        break;

                    case 5:
                        this.gender = in.readString();
                        break;

                    case 6:
                        this.birthdate = in.readString();
                        break;

                    case 7:
                        this.issuedAt = in.readString();
                        break;

                    case 8:
                        this.expiresIn = in.readString();
                        break;

                    case 9:
                        this.authTime = in.readString();
                        break;

                    case 10:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.imageUrl = null;
                        } else {
                            this.imageUrl = in.readString();
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for User instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
            implements org.apache.avro.data.RecordBuilder<User> {

        private java.lang.String userId;
        private java.lang.String givenName;
        private java.lang.String familyName;
        private java.lang.String username;
        private java.lang.String email;
        private java.lang.String gender;
        private java.lang.String birthdate;
        private java.lang.String issuedAt;
        private java.lang.String expiresIn;
        private java.lang.String authTime;
        private java.lang.String imageUrl;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(com.squad.gateway.model.User.Builder other) {
            super(other);
            if (isValidValue(fields()[0] , other.userId)) {
                this.userId = data().deepCopy(fields()[0].schema() , other.userId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1] , other.givenName)) {
                this.givenName = data().deepCopy(fields()[1].schema() , other.givenName);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2] , other.familyName)) {
                this.familyName = data().deepCopy(fields()[2].schema() , other.familyName);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3] , other.username)) {
                this.username = data().deepCopy(fields()[3].schema() , other.username);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4] , other.email)) {
                this.email = data().deepCopy(fields()[4].schema() , other.email);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5] , other.gender)) {
                this.gender = data().deepCopy(fields()[5].schema() , other.gender);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6] , other.birthdate)) {
                this.birthdate = data().deepCopy(fields()[6].schema() , other.birthdate);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7] , other.issuedAt)) {
                this.issuedAt = data().deepCopy(fields()[7].schema() , other.issuedAt);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8] , other.expiresIn)) {
                this.expiresIn = data().deepCopy(fields()[8].schema() , other.expiresIn);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9] , other.authTime)) {
                this.authTime = data().deepCopy(fields()[9].schema() , other.authTime);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10] , other.imageUrl)) {
                this.imageUrl = data().deepCopy(fields()[10].schema() , other.imageUrl);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
        }

        /**
         * Creates a Builder by copying an existing User instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(com.squad.gateway.model.User other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0] , other.userId)) {
                this.userId = data().deepCopy(fields()[0].schema() , other.userId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1] , other.givenName)) {
                this.givenName = data().deepCopy(fields()[1].schema() , other.givenName);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2] , other.familyName)) {
                this.familyName = data().deepCopy(fields()[2].schema() , other.familyName);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3] , other.username)) {
                this.username = data().deepCopy(fields()[3].schema() , other.username);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4] , other.email)) {
                this.email = data().deepCopy(fields()[4].schema() , other.email);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5] , other.gender)) {
                this.gender = data().deepCopy(fields()[5].schema() , other.gender);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6] , other.birthdate)) {
                this.birthdate = data().deepCopy(fields()[6].schema() , other.birthdate);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7] , other.issuedAt)) {
                this.issuedAt = data().deepCopy(fields()[7].schema() , other.issuedAt);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8] , other.expiresIn)) {
                this.expiresIn = data().deepCopy(fields()[8].schema() , other.expiresIn);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9] , other.authTime)) {
                this.authTime = data().deepCopy(fields()[9].schema() , other.authTime);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10] , other.imageUrl)) {
                this.imageUrl = data().deepCopy(fields()[10].schema() , other.imageUrl);
                fieldSetFlags()[10] = true;
            }
        }

        /**
         * Gets the value of the 'userId' field.
         *
         * @return The value.
         */
        public java.lang.String getUserId() {
            return userId;
        }


        /**
         * Sets the value of the 'userId' field.
         *
         * @param value The value of 'userId'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setUserId(java.lang.String value) {
            validate(fields()[0] , value);
            this.userId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'userId' field has been set.
         *
         * @return True if the 'userId' field has been set, false otherwise.
         */
        public boolean hasUserId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'userId' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearUserId() {
            userId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'givenName' field.
         *
         * @return The value.
         */
        public java.lang.String getGivenName() {
            return givenName;
        }


        /**
         * Sets the value of the 'givenName' field.
         *
         * @param value The value of 'givenName'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setGivenName(java.lang.String value) {
            validate(fields()[1] , value);
            this.givenName = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'givenName' field has been set.
         *
         * @return True if the 'givenName' field has been set, false otherwise.
         */
        public boolean hasGivenName() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'givenName' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearGivenName() {
            givenName = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'familyName' field.
         *
         * @return The value.
         */
        public java.lang.String getFamilyName() {
            return familyName;
        }


        /**
         * Sets the value of the 'familyName' field.
         *
         * @param value The value of 'familyName'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setFamilyName(java.lang.String value) {
            validate(fields()[2] , value);
            this.familyName = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'familyName' field has been set.
         *
         * @return True if the 'familyName' field has been set, false otherwise.
         */
        public boolean hasFamilyName() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'familyName' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearFamilyName() {
            familyName = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'username' field.
         *
         * @return The value.
         */
        public java.lang.String getUsername() {
            return username;
        }


        /**
         * Sets the value of the 'username' field.
         *
         * @param value The value of 'username'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setUsername(java.lang.String value) {
            validate(fields()[3] , value);
            this.username = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'username' field has been set.
         *
         * @return True if the 'username' field has been set, false otherwise.
         */
        public boolean hasUsername() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'username' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearUsername() {
            username = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'email' field.
         *
         * @return The value.
         */
        public java.lang.String getEmail() {
            return email;
        }


        /**
         * Sets the value of the 'email' field.
         *
         * @param value The value of 'email'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setEmail(java.lang.String value) {
            validate(fields()[4] , value);
            this.email = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'email' field has been set.
         *
         * @return True if the 'email' field has been set, false otherwise.
         */
        public boolean hasEmail() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'email' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearEmail() {
            email = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'gender' field.
         *
         * @return The value.
         */
        public java.lang.String getGender() {
            return gender;
        }


        /**
         * Sets the value of the 'gender' field.
         *
         * @param value The value of 'gender'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setGender(java.lang.String value) {
            validate(fields()[5] , value);
            this.gender = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'gender' field has been set.
         *
         * @return True if the 'gender' field has been set, false otherwise.
         */
        public boolean hasGender() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'gender' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearGender() {
            gender = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'birthdate' field.
         *
         * @return The value.
         */
        public java.lang.String getBirthdate() {
            return birthdate;
        }


        /**
         * Sets the value of the 'birthdate' field.
         *
         * @param value The value of 'birthdate'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setBirthdate(java.lang.String value) {
            validate(fields()[6] , value);
            this.birthdate = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'birthdate' field has been set.
         *
         * @return True if the 'birthdate' field has been set, false otherwise.
         */
        public boolean hasBirthdate() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'birthdate' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearBirthdate() {
            birthdate = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'issuedAt' field.
         *
         * @return The value.
         */
        public java.lang.String getIssuedAt() {
            return issuedAt;
        }


        /**
         * Sets the value of the 'issuedAt' field.
         *
         * @param value The value of 'issuedAt'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setIssuedAt(java.lang.String value) {
            validate(fields()[7] , value);
            this.issuedAt = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'issuedAt' field has been set.
         *
         * @return True if the 'issuedAt' field has been set, false otherwise.
         */
        public boolean hasIssuedAt() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'issuedAt' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearIssuedAt() {
            issuedAt = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'expiresIn' field.
         *
         * @return The value.
         */
        public java.lang.String getExpiresIn() {
            return expiresIn;
        }


        /**
         * Sets the value of the 'expiresIn' field.
         *
         * @param value The value of 'expiresIn'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setExpiresIn(java.lang.String value) {
            validate(fields()[8] , value);
            this.expiresIn = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'expiresIn' field has been set.
         *
         * @return True if the 'expiresIn' field has been set, false otherwise.
         */
        public boolean hasExpiresIn() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'expiresIn' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearExpiresIn() {
            expiresIn = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'authTime' field.
         *
         * @return The value.
         */
        public java.lang.String getAuthTime() {
            return authTime;
        }


        /**
         * Sets the value of the 'authTime' field.
         *
         * @param value The value of 'authTime'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setAuthTime(java.lang.String value) {
            validate(fields()[9] , value);
            this.authTime = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'authTime' field has been set.
         *
         * @return True if the 'authTime' field has been set, false otherwise.
         */
        public boolean hasAuthTime() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'authTime' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearAuthTime() {
            authTime = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'imageUrl' field.
         *
         * @return The value.
         */
        public java.lang.String getImageUrl() {
            return imageUrl;
        }


        /**
         * Sets the value of the 'imageUrl' field.
         *
         * @param value The value of 'imageUrl'.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder setImageUrl(java.lang.String value) {
            validate(fields()[10] , value);
            this.imageUrl = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'imageUrl' field has been set.
         *
         * @return True if the 'imageUrl' field has been set, false otherwise.
         */
        public boolean hasImageUrl() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'imageUrl' field.
         *
         * @return This builder.
         */
        public com.squad.gateway.model.User.Builder clearImageUrl() {
            imageUrl = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public User build() {
            try {
                User record = new User();
                record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.String) defaultValue(fields()[0]);
                record.givenName = fieldSetFlags()[1] ? this.givenName : (java.lang.String) defaultValue(fields()[1]);
                record.familyName = fieldSetFlags()[2] ? this.familyName : (java.lang.String) defaultValue(fields()[2]);
                record.username = fieldSetFlags()[3] ? this.username : (java.lang.String) defaultValue(fields()[3]);
                record.email = fieldSetFlags()[4] ? this.email : (java.lang.String) defaultValue(fields()[4]);
                record.gender = fieldSetFlags()[5] ? this.gender : (java.lang.String) defaultValue(fields()[5]);
                record.birthdate = fieldSetFlags()[6] ? this.birthdate : (java.lang.String) defaultValue(fields()[6]);
                record.issuedAt = fieldSetFlags()[7] ? this.issuedAt : (java.lang.String) defaultValue(fields()[7]);
                record.expiresIn = fieldSetFlags()[8] ? this.expiresIn : (java.lang.String) defaultValue(fields()[8]);
                record.authTime = fieldSetFlags()[9] ? this.authTime : (java.lang.String) defaultValue(fields()[9]);
                record.imageUrl = fieldSetFlags()[10] ? this.imageUrl : (java.lang.String) defaultValue(fields()[10]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










