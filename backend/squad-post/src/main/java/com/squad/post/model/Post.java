/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.squad.post.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Post extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7309892617846836656L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Post\",\"namespace\":\"com.squad.post.model\",\"fields\":[{\"name\":\"postId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"documentId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"text\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isNotifiable\",\"type\":\"boolean\"},{\"name\":\"isPublic\",\"type\":\"boolean\"},{\"name\":\"PostType\",\"type\":{\"type\":\"enum\",\"name\":\"PostType\",\"symbols\":[\"NORMAL\",\"DOCUMENT\",\"QNA\",\"ANNOUNCEMENTS\",\"EVENTS\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Post> ENCODER =
      new BinaryMessageEncoder<Post>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Post> DECODER =
      new BinaryMessageDecoder<Post>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Post> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Post> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Post> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Post>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Post to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Post from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Post instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Post fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String postId;
  @Deprecated public java.lang.String userId;
  @Deprecated public java.lang.String groupId;
  @Deprecated public java.lang.String documentId;
  @Deprecated public java.lang.String text;
  @Deprecated public boolean isNotifiable;
  @Deprecated public boolean isPublic;
  @Deprecated public com.squad.post.model.PostType PostType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Post() {}

  /**
   * All-args constructor.
   * @param postId The new value for postId
   * @param userId The new value for userId
   * @param groupId The new value for groupId
   * @param documentId The new value for documentId
   * @param text The new value for text
   * @param isNotifiable The new value for isNotifiable
   * @param isPublic The new value for isPublic
   * @param PostType The new value for PostType
   */
  public Post(java.lang.String postId, java.lang.String userId, java.lang.String groupId, java.lang.String documentId, java.lang.String text, java.lang.Boolean isNotifiable, java.lang.Boolean isPublic, com.squad.post.model.PostType PostType) {
    this.postId = postId;
    this.userId = userId;
    this.groupId = groupId;
    this.documentId = documentId;
    this.text = text;
    this.isNotifiable = isNotifiable;
    this.isPublic = isPublic;
    this.PostType = PostType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return postId;
    case 1: return userId;
    case 2: return groupId;
    case 3: return documentId;
    case 4: return text;
    case 5: return isNotifiable;
    case 6: return isPublic;
    case 7: return PostType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: postId = (java.lang.String)value$; break;
    case 1: userId = (java.lang.String)value$; break;
    case 2: groupId = (java.lang.String)value$; break;
    case 3: documentId = (java.lang.String)value$; break;
    case 4: text = (java.lang.String)value$; break;
    case 5: isNotifiable = (java.lang.Boolean)value$; break;
    case 6: isPublic = (java.lang.Boolean)value$; break;
    case 7: PostType = (com.squad.post.model.PostType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'postId' field.
   * @return The value of the 'postId' field.
   */
  public java.lang.String getPostId() {
    return postId;
  }


  /**
   * Sets the value of the 'postId' field.
   * @param value the value to set.
   */
  public void setPostId(java.lang.String value) {
    this.postId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'groupId' field.
   * @return The value of the 'groupId' field.
   */
  public java.lang.String getGroupId() {
    return groupId;
  }


  /**
   * Sets the value of the 'groupId' field.
   * @param value the value to set.
   */
  public void setGroupId(java.lang.String value) {
    this.groupId = value;
  }

  /**
   * Gets the value of the 'documentId' field.
   * @return The value of the 'documentId' field.
   */
  public java.lang.String getDocumentId() {
    return documentId;
  }


  /**
   * Sets the value of the 'documentId' field.
   * @param value the value to set.
   */
  public void setDocumentId(java.lang.String value) {
    this.documentId = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.String getText() {
    return text;
  }


  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'isNotifiable' field.
   * @return The value of the 'isNotifiable' field.
   */
  public boolean getIsNotifiable() {
    return isNotifiable;
  }


  /**
   * Sets the value of the 'isNotifiable' field.
   * @param value the value to set.
   */
  public void setIsNotifiable(boolean value) {
    this.isNotifiable = value;
  }

  /**
   * Gets the value of the 'isPublic' field.
   * @return The value of the 'isPublic' field.
   */
  public boolean getIsPublic() {
    return isPublic;
  }


  /**
   * Sets the value of the 'isPublic' field.
   * @param value the value to set.
   */
  public void setIsPublic(boolean value) {
    this.isPublic = value;
  }

  /**
   * Gets the value of the 'PostType' field.
   * @return The value of the 'PostType' field.
   */
  public com.squad.post.model.PostType getPostType() {
    return PostType;
  }


  /**
   * Sets the value of the 'PostType' field.
   * @param value the value to set.
   */
  public void setPostType(com.squad.post.model.PostType value) {
    this.PostType = value;
  }

  /**
   * Creates a new Post RecordBuilder.
   * @return A new Post RecordBuilder
   */
  public static com.squad.post.model.Post.Builder newBuilder() {
    return new com.squad.post.model.Post.Builder();
  }

  /**
   * Creates a new Post RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Post RecordBuilder
   */
  public static com.squad.post.model.Post.Builder newBuilder(com.squad.post.model.Post.Builder other) {
    if (other == null) {
      return new com.squad.post.model.Post.Builder();
    } else {
      return new com.squad.post.model.Post.Builder(other);
    }
  }

  /**
   * Creates a new Post RecordBuilder by copying an existing Post instance.
   * @param other The existing instance to copy.
   * @return A new Post RecordBuilder
   */
  public static com.squad.post.model.Post.Builder newBuilder(com.squad.post.model.Post other) {
    if (other == null) {
      return new com.squad.post.model.Post.Builder();
    } else {
      return new com.squad.post.model.Post.Builder(other);
    }
  }

  /**
   * RecordBuilder for Post instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Post>
    implements org.apache.avro.data.RecordBuilder<Post> {

    private java.lang.String postId;
    private java.lang.String userId;
    private java.lang.String groupId;
    private java.lang.String documentId;
    private java.lang.String text;
    private boolean isNotifiable;
    private boolean isPublic;
    private com.squad.post.model.PostType PostType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.squad.post.model.Post.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.postId)) {
        this.postId = data().deepCopy(fields()[0].schema(), other.postId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.groupId)) {
        this.groupId = data().deepCopy(fields()[2].schema(), other.groupId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.documentId)) {
        this.documentId = data().deepCopy(fields()[3].schema(), other.documentId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.text)) {
        this.text = data().deepCopy(fields()[4].schema(), other.text);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.isNotifiable)) {
        this.isNotifiable = data().deepCopy(fields()[5].schema(), other.isNotifiable);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.isPublic)) {
        this.isPublic = data().deepCopy(fields()[6].schema(), other.isPublic);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.PostType)) {
        this.PostType = data().deepCopy(fields()[7].schema(), other.PostType);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Post instance
     * @param other The existing instance to copy.
     */
    private Builder(com.squad.post.model.Post other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.postId)) {
        this.postId = data().deepCopy(fields()[0].schema(), other.postId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.groupId)) {
        this.groupId = data().deepCopy(fields()[2].schema(), other.groupId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.documentId)) {
        this.documentId = data().deepCopy(fields()[3].schema(), other.documentId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.text)) {
        this.text = data().deepCopy(fields()[4].schema(), other.text);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isNotifiable)) {
        this.isNotifiable = data().deepCopy(fields()[5].schema(), other.isNotifiable);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isPublic)) {
        this.isPublic = data().deepCopy(fields()[6].schema(), other.isPublic);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.PostType)) {
        this.PostType = data().deepCopy(fields()[7].schema(), other.PostType);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'postId' field.
      * @return The value.
      */
    public java.lang.String getPostId() {
      return postId;
    }


    /**
      * Sets the value of the 'postId' field.
      * @param value The value of 'postId'.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder setPostId(java.lang.String value) {
      validate(fields()[0], value);
      this.postId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'postId' field has been set.
      * @return True if the 'postId' field has been set, false otherwise.
      */
    public boolean hasPostId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'postId' field.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder clearPostId() {
      postId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupId' field.
      * @return The value.
      */
    public java.lang.String getGroupId() {
      return groupId;
    }


    /**
      * Sets the value of the 'groupId' field.
      * @param value The value of 'groupId'.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder setGroupId(java.lang.String value) {
      validate(fields()[2], value);
      this.groupId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'groupId' field has been set.
      * @return True if the 'groupId' field has been set, false otherwise.
      */
    public boolean hasGroupId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'groupId' field.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder clearGroupId() {
      groupId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'documentId' field.
      * @return The value.
      */
    public java.lang.String getDocumentId() {
      return documentId;
    }


    /**
      * Sets the value of the 'documentId' field.
      * @param value The value of 'documentId'.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder setDocumentId(java.lang.String value) {
      validate(fields()[3], value);
      this.documentId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'documentId' field has been set.
      * @return True if the 'documentId' field has been set, false otherwise.
      */
    public boolean hasDocumentId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'documentId' field.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder clearDocumentId() {
      documentId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.String getText() {
      return text;
    }


    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder setText(java.lang.String value) {
      validate(fields()[4], value);
      this.text = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder clearText() {
      text = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isNotifiable' field.
      * @return The value.
      */
    public boolean getIsNotifiable() {
      return isNotifiable;
    }


    /**
      * Sets the value of the 'isNotifiable' field.
      * @param value The value of 'isNotifiable'.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder setIsNotifiable(boolean value) {
      validate(fields()[5], value);
      this.isNotifiable = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isNotifiable' field has been set.
      * @return True if the 'isNotifiable' field has been set, false otherwise.
      */
    public boolean hasIsNotifiable() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isNotifiable' field.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder clearIsNotifiable() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isPublic' field.
      * @return The value.
      */
    public boolean getIsPublic() {
      return isPublic;
    }


    /**
      * Sets the value of the 'isPublic' field.
      * @param value The value of 'isPublic'.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder setIsPublic(boolean value) {
      validate(fields()[6], value);
      this.isPublic = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isPublic' field has been set.
      * @return True if the 'isPublic' field has been set, false otherwise.
      */
    public boolean hasIsPublic() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isPublic' field.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder clearIsPublic() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'PostType' field.
      * @return The value.
      */
    public com.squad.post.model.PostType getPostType() {
      return PostType;
    }


    /**
      * Sets the value of the 'PostType' field.
      * @param value The value of 'PostType'.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder setPostType(com.squad.post.model.PostType value) {
      validate(fields()[7], value);
      this.PostType = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'PostType' field has been set.
      * @return True if the 'PostType' field has been set, false otherwise.
      */
    public boolean hasPostType() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'PostType' field.
      * @return This builder.
      */
    public com.squad.post.model.Post.Builder clearPostType() {
      PostType = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Post build() {
      try {
        Post record = new Post();
        record.postId = fieldSetFlags()[0] ? this.postId : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        record.groupId = fieldSetFlags()[2] ? this.groupId : (java.lang.String) defaultValue(fields()[2]);
        record.documentId = fieldSetFlags()[3] ? this.documentId : (java.lang.String) defaultValue(fields()[3]);
        record.text = fieldSetFlags()[4] ? this.text : (java.lang.String) defaultValue(fields()[4]);
        record.isNotifiable = fieldSetFlags()[5] ? this.isNotifiable : (java.lang.Boolean) defaultValue(fields()[5]);
        record.isPublic = fieldSetFlags()[6] ? this.isPublic : (java.lang.Boolean) defaultValue(fields()[6]);
        record.PostType = fieldSetFlags()[7] ? this.PostType : (com.squad.post.model.PostType) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Post>
    WRITER$ = (org.apache.avro.io.DatumWriter<Post>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Post>
    READER$ = (org.apache.avro.io.DatumReader<Post>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.postId);

    out.writeString(this.userId);

    out.writeString(this.groupId);

    out.writeString(this.documentId);

    out.writeString(this.text);

    out.writeBoolean(this.isNotifiable);

    out.writeBoolean(this.isPublic);

    out.writeEnum(this.PostType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.postId = in.readString();

      this.userId = in.readString();

      this.groupId = in.readString();

      this.documentId = in.readString();

      this.text = in.readString();

      this.isNotifiable = in.readBoolean();

      this.isPublic = in.readBoolean();

      this.PostType = com.squad.post.model.PostType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.postId = in.readString();
          break;

        case 1:
          this.userId = in.readString();
          break;

        case 2:
          this.groupId = in.readString();
          break;

        case 3:
          this.documentId = in.readString();
          break;

        case 4:
          this.text = in.readString();
          break;

        case 5:
          this.isNotifiable = in.readBoolean();
          break;

        case 6:
          this.isPublic = in.readBoolean();
          break;

        case 7:
          this.PostType = com.squad.post.model.PostType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










